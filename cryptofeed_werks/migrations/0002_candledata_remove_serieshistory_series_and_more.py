# Generated by Django 4.0.5 on 2022-07-18 23:11

import django.db.models.deletion
from django.db import migrations, models

import cryptofeed_werks.models.candles
from cryptofeed_werks.constants import Frequency


def forwards_func(app, schema_editor):
    AggregatedTradeData = app.get_model("cryptofeed_werks", "AggregatedTradeData")

    queryset = AggregatedTradeData.objects.all()
    for obj in queryset:
        if obj.is_hourly:
            obj.frequency = Frequency.HOUR
        else:
            obj.frequency = Frequency.MINUTE
    AggregatedTradeData.objects.bulk_update(queryset, ["frequency"], batch_size=100)


class Migration(migrations.Migration):

    dependencies = [
        ("cryptofeed_werks", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CandleData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, verbose_name="timestamp"),
                ),
                (
                    "frequency",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Minute"),
                            (60, "Hour"),
                            (1440, "Day"),
                            (10080, "Week"),
                        ],
                        verbose_name="frequency",
                    ),
                ),
                ("cache", models.JSONField(default=dict, verbose_name="cache")),
                (
                    "data",
                    models.FileField(
                        blank=True,
                        upload_to=cryptofeed_werks.models.candles.upload_data_to,
                        verbose_name="data",
                    ),
                ),
            ],
            options={
                "verbose_name": "candle data",
                "verbose_name_plural": "candle data",
                "db_table": "cryptofeed_werks_candle_data",
                "ordering": ("timestamp",),
            },
        ),
        migrations.RemoveField(
            model_name="serieshistory",
            name="series",
        ),
        migrations.AlterModelOptions(
            name="candle",
            options={"verbose_name": "candle", "verbose_name_plural": "candles"},
        ),
        migrations.RemoveField(
            model_name="candle",
            name="buy_notional",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="buy_ticks",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="buy_volume",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="close",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="data",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="high",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="low",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="notional",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="open",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="series",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="ticks",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="timestamp",
        ),
        migrations.RemoveField(
            model_name="candle",
            name="volume",
        ),
        migrations.AddField(
            model_name="aggregatedtradedata",
            name="frequency",
            field=models.PositiveIntegerField(
                choices=[(1, "Minute"), (60, "Hour"), (1440, "Day"), (10080, "Week")],
                db_index=True,
                default=Frequency.MINUTE,
                verbose_name="frequency",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="candle",
            name="weekly_cache_reset",
            field=models.BooleanField(default=False, verbose_name="weekly cache reset"),
        ),
        migrations.AddField(
            model_name="candle",
            name="is_ema",
            field=models.BooleanField(default=False, verbose_name="EMA"),
        ),
        migrations.AddField(
            model_name="candle",
            name="sampling_type",
            field=models.CharField(
                choices=[
                    ("time", "Time"),
                    ("volume", "Volume"),
                    ("notional", "Notional"),
                    ("tick", "Tick"),
                ],
                max_length=255,
                verbose_name="sampling type",
            ),
        ),
        migrations.AddField(
            model_name="candle",
            name="symbols",
            field=models.ManyToManyField(
                db_table="cryptofeed_werks_series_symbol",
                to="cryptofeed_werks.symbol",
                verbose_name="symbols",
            ),
        ),
        migrations.AddField(
            model_name="candle",
            name="threshold",
            field=models.CharField(
                default=None, max_length=255, verbose_name="threshold"
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="candle",
            name="threshold_type",
            field=models.CharField(
                choices=[
                    ("constant", "Constant"),
                    ("imbalance", "Imbalance"),
                    ("run", "Run"),
                ],
                default=None,
                max_length=255,
                verbose_name="threshold type",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="candle",
            name="top_n",
            field=models.PositiveIntegerField(null=True, verbose_name="top N"),
        ),
        migrations.AlterField(
            model_name="aggregatedtradedata",
            name="is_hourly",
            field=models.BooleanField(
                db_index=True, default=False, verbose_name="hourly"
            ),
        ),
        migrations.AlterField(
            model_name="aggregatedtradedata",
            name="symbol",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="aggregated",
                to="cryptofeed_werks.symbol",
            ),
        ),
        migrations.AlterField(
            model_name="symbol",
            name="exchange",
            field=models.CharField(
                choices=[
                    ("binance", "Binance"),
                    ("bitfinex", "Bitfinex"),
                    ("bitmex", "BitMEX"),
                    ("bybit", "Bybit"),
                    ("coinbase", "Coinbase"),
                    ("ftx", "FTX"),
                ],
                max_length=255,
                verbose_name="exchange",
            ),
        ),
        migrations.DeleteModel(
            name="Series",
        ),
        migrations.DeleteModel(
            name="SeriesHistory",
        ),
        migrations.AddField(
            model_name="candledata",
            name="config",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data",
                to="cryptofeed_werks.candle",
            ),
        ),
        migrations.AddField(
            model_name="candledata",
            name="symbol",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data",
                to="cryptofeed_werks.symbol",
            ),
        ),
        migrations.RunPython(forwards_func, migrations.RunPython.noop),
    ]
