# Generated by Django 4.0.2 on 2022-02-11 13:33

import django.db.models.deletion
import django.db.models.expressions
from django.db import migrations, models

import cryptofeed_werks.models.aggregated_trades


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="GlobalSymbol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
            ],
            options={
                "verbose_name": "global symbol",
                "verbose_name_plural": "global symbols",
                "db_table": "cryptofeed_werks_global_symbol",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Symbol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "exchange",
                    models.CharField(
                        choices=[
                            ("binance", "Binance"),
                            ("bitfinex", "Bitfinex"),
                            ("bitflyer", "bitFlyer"),
                            ("bitmex", "BitMEX"),
                            ("bybit", "Bybit"),
                            ("coinbase", "Coinbase"),
                            ("deribit", "Deribit"),
                            ("ftx", "FTX"),
                            ("upbit", "Upbit"),
                        ],
                        max_length=255,
                        verbose_name="exchange",
                    ),
                ),
                (
                    "symbol_type",
                    models.CharField(
                        choices=[
                            ("spot", "Spot"),
                            ("perpetual", "Perpetual"),
                            ("future", "Future"),
                        ],
                        max_length=255,
                        verbose_name="type",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='API symbol. For futures this is the "root symbol", i.e. XBT',
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "min_volume",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="For aggregated trades, the minimum volume required, e.g. 1000",
                        null=True,
                        verbose_name="min volume",
                    ),
                ),
                (
                    "global_symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="symbols",
                        to="cryptofeed_werks.globalsymbol",
                        verbose_name="global symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "symbol",
                "verbose_name_plural": "symbols",
                "db_table": "cryptofeed_werks_symbol",
                "ordering": ("exchange", "name", "symbol_type"),
            },
        ),
        migrations.CreateModel(
            name="Future",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="name"),
                ),
                (
                    "expiry",
                    models.DateTimeField(null=True, verbose_name="expiry"),
                ),
                (
                    "root_symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="futures",
                        to="cryptofeed_werks.symbol",
                        verbose_name="root symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "future",
                "verbose_name_plural": "futures",
                "db_table": "cryptofeed_werks_future",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Candle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uid",
                    models.CharField(blank=True, max_length=255, verbose_name="uid"),
                ),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, verbose_name="timestamp"),
                ),
                (
                    "open",
                    models.DecimalField(
                        decimal_places=38, max_digits=76, null=True, verbose_name="open"
                    ),
                ),
                (
                    "high",
                    models.DecimalField(
                        decimal_places=38, max_digits=76, null=True, verbose_name="high"
                    ),
                ),
                (
                    "low",
                    models.DecimalField(
                        decimal_places=38, max_digits=76, null=True, verbose_name="low"
                    ),
                ),
                (
                    "close",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        null=True,
                        verbose_name="close",
                    ),
                ),
                (
                    "buy_volume",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        null=True,
                        verbose_name="buy volume",
                    ),
                ),
                (
                    "volume",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        null=True,
                        verbose_name="volume",
                    ),
                ),
                (
                    "buy_notional",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        null=True,
                        verbose_name="buy notional",
                    ),
                ),
                (
                    "notional",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        null=True,
                        verbose_name="notional",
                    ),
                ),
                (
                    "buy_ticks",
                    models.PositiveIntegerField(null=True, verbose_name="buy ticks"),
                ),
                ("ticks", models.PositiveIntegerField(null=True, verbose_name="ticks")),
                (
                    "ok",
                    models.BooleanField(
                        db_index=True, default=False, null=True, verbose_name="ok"
                    ),
                ),
                (
                    "future",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="candles",
                        to="cryptofeed_werks.future",
                        verbose_name="future",
                    ),
                ),
                (
                    "symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="candles",
                        to="cryptofeed_werks.symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "candle",
                "verbose_name_plural": "candles",
                "db_table": "cryptofeed_werks_candle",
                "ordering": ("timestamp",),
            },
        ),
        migrations.CreateModel(
            name="AggregatedTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(verbose_name="timestamp"),
                ),
                (
                    "nanoseconds",
                    models.PositiveIntegerField(verbose_name="nanoseconds"),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=38, max_digits=76, verbose_name="price"
                    ),
                ),
                (
                    "volume",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        null=True,
                        verbose_name="volume",
                    ),
                ),
                (
                    "notional",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        null=True,
                        verbose_name="notional",
                    ),
                ),
                (
                    "tick_rule",
                    models.IntegerField(
                        null=True,
                        validators=[
                            cryptofeed_werks.models.aggregated_trades.one_or_minus_one
                        ],
                        verbose_name="notional",
                    ),
                ),
                ("ticks", models.PositiveIntegerField(null=True, verbose_name="ticks")),
                (
                    "high",
                    models.DecimalField(
                        decimal_places=38, max_digits=76, verbose_name="high"
                    ),
                ),
                (
                    "low",
                    models.DecimalField(
                        decimal_places=38, max_digits=76, verbose_name="low"
                    ),
                ),
                (
                    "total_buy_volume",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        verbose_name="total buy volume",
                    ),
                ),
                (
                    "total_volume",
                    models.DecimalField(
                        decimal_places=38, max_digits=76, verbose_name="total volume"
                    ),
                ),
                (
                    "total_buy_notional",
                    models.DecimalField(
                        decimal_places=38,
                        max_digits=76,
                        verbose_name="total buy notional",
                    ),
                ),
                (
                    "total_notional",
                    models.DecimalField(
                        decimal_places=38, max_digits=76, verbose_name="total notional"
                    ),
                ),
                (
                    "total_buy_ticks",
                    models.PositiveIntegerField(verbose_name="total buy ticks"),
                ),
                (
                    "total_ticks",
                    models.PositiveIntegerField(verbose_name="total ticks"),
                ),
                (
                    "candle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aggregated_trades",
                        to="cryptofeed_werks.candle",
                    ),
                ),
            ],
            options={
                "verbose_name": "aggregated trade",
                "verbose_name_plural": "aggregated trades",
                "db_table": "cryptofeed_werks_aggregated_trade",
                "ordering": ("timestamp",),
            },
        ),
        migrations.CreateModel(
            name="APIClient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                ("url", models.URLField(blank=True, verbose_name="url")),
                ("active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "symbols",
                    models.ManyToManyField(
                        db_table="cryptofeed_werks_api_client_symbol",
                        to="cryptofeed_werks.Symbol",
                        verbose_name="symbols",
                    ),
                ),
            ],
            options={
                "verbose_name": "api client",
                "verbose_name_plural": "api clients",
                "db_table": "cryptofeed_werks_api_client",
                "ordering": ("name",),
            },
        ),
    ]
